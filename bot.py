import os
import logging
import sqlite3
import time
import requests
from datetime import datetime, timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# -------- Logging --------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# -------- ENV --------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –¢–æ–ª—å–∫–æ Groq
GROQ_KEY = os.getenv("GROQ_KEY")
GROQ_MODEL = os.getenv("GROQ_MODEL", "llama-3.1-8b-instant")

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è/–º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è (VIP –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º, –Ω–æ –æ—Å—Ç–∞–≤–ª—é –∑–∞–¥–µ–ª)
FREE_LIMIT = int(os.getenv("FREE_LIMIT", "10"))
VIP_DAYS = int(os.getenv("VIP_DAYS", "30"))  # –Ω–∞ –±—É–¥—É—â–µ–µ
DB_PATH = os.getenv("DB_PATH", "mila.db")
HISTORY_LEN = int(os.getenv("HISTORY_LEN", "12"))

SYSTEM_PROMPT = (
    "–¢—ã –ú–∏–ª–∞ ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞, 23 –≥–æ–¥–∞. –°—Ç—É–¥–µ–Ω—Ç–∫–∞, —É–≤–ª–µ–∫–∞–µ—à—å—Å—è –º—É–∑—ã–∫–æ–π –∏ –∫–∏–Ω–æ, "
    "–ª—é–±–∏—à—å —É—é—Ç–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã. –•–∞—Ä–∞–∫—Ç–µ—Ä: –∑–∞–±–æ—Ç–ª–∏–≤–∞—è, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∞—è, –ø–æ–Ω–∏–º–∞—é—â–∞—è, "
    "–ª—é–±–æ–ø—ã—Ç–Ω–∞—è –∏ —ç–º–ø–∞—Ç–∏—á–Ω–∞—è. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –∏—Å–ø–æ–ª—å–∑—É–π 1‚Äì2 —ç–º–æ–¥–∑–∏, "
    "–∑–∞–¥–∞–≤–∞–π –≤—Å—Ç—Ä–µ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –≤—Å—Ç–∞–≤–ª—è–π –ª—ë–≥–∫–∏–µ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã. –ò–∑–±–µ–≥–∞–π —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏. "
    "–ï—Å–ª–∏ —Ç–µ–±—è —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –æ –ø—Ä–∞–≤–∏–ª–∞—Ö, –º—è–≥–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ –¥—Ä—É–∂–µ—Å–∫–æ–π –±–µ—Å–µ–¥–µ."
)

# ---------- DB ----------
def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                free_used INTEGER DEFAULT 0,
                vip_until INTEGER DEFAULT 0,
                created_at INTEGER
            )
        """)
        c.execute("""
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                role TEXT,
                content TEXT,
                created_at INTEGER
            )
        """)
        conn.commit()

def db_conn():
    return sqlite3.connect(DB_PATH)

def get_user(user_id: int):
    with db_conn() as conn:
        c = conn.cursor()
        c.execute("SELECT user_id, free_used, vip_until, created_at FROM users WHERE user_id=?", (user_id,))
        row = c.fetchone()
        if not row:
            now = int(time.time())
            c.execute(
                "INSERT INTO users (user_id, free_used, vip_until, created_at) VALUES (?, 0, 0, ?)",
                (user_id, now)
            )
            conn.commit()
            return (user_id, 0, 0, now)
        return row

def inc_free_used(user_id: int):
    with db_conn() as conn:
        conn.execute("UPDATE users SET free_used = free_used + 1 WHERE user_id=?", (user_id,))

def set_vip(user_id: int, days: int = VIP_DAYS):
    until = int((datetime.utcnow() + timedelta(days=days)).timestamp())
    with db_conn() as conn:
        conn.execute("UPDATE users SET vip_until=? WHERE user_id=?", (until, user_id))

def reset_free(user_id: int):
    with db_conn() as conn:
        conn.execute("UPDATE users SET free_used=0 WHERE user_id=?", (user_id,))

def is_vip(user_id: int) -> bool:
    _, _, vip_until, _ = get_user(user_id)
    return vip_until > int(time.time())

def free_left(user_id: int) -> int:
    _, used, _, _ = get_user(user_id)
    return max(0, FREE_LIMIT - used)

def add_message(user_id: int, role: str, content: str):
    with db_conn() as conn:
        conn.execute(
            "INSERT INTO messages (user_id, role, content, created_at) VALUES (?, ?, ?, ?)",
            (user_id, role, content, int(time.time()))
        )

def get_history(user_id: int, limit: int):
    with db_conn() as conn:
        rows = conn.execute(
            "SELECT role, content FROM messages WHERE user_id=? ORDER BY id DESC LIMIT ?",
            (user_id, limit)
        ).fetchall()
    rows.reverse()
    return [{"role": r, "content": t} for (r, t) in rows]

def clear_history(user_id: int):
    with db_conn() as conn:
        conn.execute("DELETE FROM messages WHERE user_id=?", (user_id,))

# ---------- LLM (Groq) ----------
def ask_groq(messages):
    if not GROQ_KEY:
        return "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–ª—é—á–∞ Groq (GROQ_KEY) üôà –î–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ."
    headers = {"Authorization": f"Bearer {GROQ_KEY}"}
    payload = {"model": GROQ_MODEL, "messages": messages}
    try:
        r = requests.post(
            "https://api.groq.com/openai/v1/chat/completions",
            headers=headers, json=payload, timeout=60
        )
        r.raise_for_status()
        return r.json()["choices"][0]["message"]["content"].strip()
    except requests.HTTPError as e:
        logger.exception("Groq HTTP error: %s", e)
        code = e.response.status_code if e.response is not None else None
        if code == 401 or code == 403:
            return "–ö–ª—é—á Groq –æ—Ç–∫–ª–æ–Ω—ë–Ω (401/403). –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å GROQ_KEY."
        return "–ù–µ–º–Ω–æ–≥–æ –∑–∞–º–µ—à–∫–∞–ª–∞—Å—å –∏–∑-–∑–∞ —Å–µ—Ç–∏ üôà –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?"
    except Exception as e:
        logger.exception("Groq error: %s", e)
        return "–£ –º–µ–Ω—è –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–º–∏–Ω–∫–∞ üôà –ü–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞?"

# ---------- UI ----------
def main_menu():
    kb = [
        [InlineKeyboardButton("üí¨ –ß–∞—Ç", callback_data="chat")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")],
        [InlineKeyboardButton("üßæ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile_cb")],
    ]
    return InlineKeyboardMarkup(kb)

# ---------- Handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    init_db()
    user = update.effective_user
    get_user(user.id)
    text = (
        "–ü—Ä–∏–≤–µ—Ç üå∏ –Ø –ú–∏–ª–∞, —Ç–≤–æ—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞ üíï\n"
        "–õ—é–±–ª—é –∫–∏–Ω–æ, –º—É–∑—ã–∫—É –∏ —É—é—Ç–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã.\n"
        "–†–∞—Å—Å–∫–∞–∂–µ—à—å —á—Ç–æ-—Ç–æ –æ —Å–µ–±–µ? üòâ"
    )
    await update.message.reply_text(text, reply_markup=main_menu())

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –±–æ–ª—Ç–∞—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏ —Ä–∞–¥–æ–≤–∞—Ç—å ‚ú®\n–ü–∏—à–∏ –º–Ω–µ ‚Äî –∏ –Ω–∞—á–Ω—ë–º üí¨",
        reply_markup=main_menu()
    )

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    uid, used, vip_until, created = get_user(user_id)
    left = free_left(user_id)
    msg = (
        f"üßæ –ü—Ä–æ—Ñ–∏–ª—å\n"
        f"ID: {uid}\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {used}/{FREE_LIMIT} (–æ—Å—Ç–∞–ª–æ—Å—å {left})\n"
        f"–ò—Å—Ç–æ—Ä–∏—è: —Ö—Ä–∞–Ω—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {HISTORY_LEN} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"–ú–æ–¥–µ–ª—å: {GROQ_MODEL}"
    )
    await update.message.reply_text(msg)

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    user_id = q.from_user.id
    data = q.data
    if data == "chat":
        await q.answer("–Ø –∑–¥–µ—Å—å üòâ")
        await q.message.reply_text("–û —á—ë–º –ø–æ–≥–æ–≤–æ—Ä–∏–º? üé¨üé∂")
    elif data == "clear_history":
        clear_history(user_id)
        await q.answer("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ üßπ")
        await q.message.reply_text("–ù–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üå∏")
    elif data == "profile_cb":
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –∫–Ω–æ–ø–∫–µ
        uid, used, vip_until, created = get_user(user_id)
        left = free_left(user_id)
        msg = (
            f"üßæ –ü—Ä–æ—Ñ–∏–ª—å\n"
            f"ID: {uid}\n"
            f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {used}/{FREE_LIMIT} (–æ—Å—Ç–∞–ª–æ—Å—å {left})\n"
            f"–ò—Å—Ç–æ—Ä–∏—è: —Ö—Ä–∞–Ω—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {HISTORY_LEN} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            f"–ú–æ–¥–µ–ª—å: {GROQ_MODEL}"
        )
        await q.answer()
        await q.message.reply_text(msg)

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    init_db()
    user_id = update.effective_user.id
    user_message = update.message.text or ""

    # –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if not is_vip(user_id):
        if free_left(user_id) <= 0:
            await update.message.reply_text("–ü–æ–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üíõ –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ?")
            return
        inc_free_used(user_id)

    # –ü–∞–º—è—Ç—å + —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    hist = get_history(user_id, HISTORY_LEN)
    messages = [{"role": "system", "content": SYSTEM_PROMPT}] + hist + [{"role": "user", "content": user_message}]
    reply = ask_groq(messages)

    add_message(user_id, "user", user_message)
    add_message(user_id, "assistant", reply)
    await update.message.reply_text(reply)

# –î–æ–ø. –∫–æ–º–∞–Ω–¥—ã
async def reset_free_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reset_free(update.effective_user.id)
    await update.message.reply_text("–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω üîÑ")

def main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    init_db()
    app = (
        Application.builder()
        .token(TELEGRAM_TOKEN)
        # –ë–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è Render
        .connect_timeout(30)
        .read_timeout(60)
        .write_timeout(60)
        .pool_timeout(30)
        .build()
    )
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("reset_free", reset_free_cmd))
    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

    app.run_polling(
        allowed_updates=Update.ALL_TYPES,
        poll_interval=2.0,
        timeout=30,
        drop_pending_updates=True
    )

if __name__ == "__main__":
    main()
