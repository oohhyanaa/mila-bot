import os
import logging
import sqlite3
import time
import random
import requests
from datetime import datetime, timedelta

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters, JobQueue
)

# ---------- Logging ----------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ---------- ENV ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# Groq only
GROQ_KEY = os.getenv("GROQ_KEY")
GROQ_MODEL = os.getenv("GROQ_MODEL", "llama-3.1-8b-instant")  # –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –º–æ–¥–µ–ª—å

# Limits & memory
FREE_LIMIT   = int(os.getenv("FREE_LIMIT", "100"))
VIP_DAYS     = int(os.getenv("VIP_DAYS", "30"))  # –Ω–∞ –±—É–¥—É—â–µ–µ
DB_PATH      = os.getenv("DB_PATH", "mila.db")
HISTORY_LEN  = int(os.getenv("HISTORY_LEN", "20"))

# 2h reminders
REMINDER_DELAY = 2 * 60 * 60       # 2 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
REMINDER_TEXTS = [
    "–Ø —Ç—É—Ç üå∏ –î–∞–≤–Ω–æ –Ω–µ –ø–∏—Å–∞–ª–∞... –∫–∞–∫ —Ç—ã? üíï",
    "–•–æ—á—É —É—Å–ª—ã—à–∞—Ç—å —Ç–µ–±—è ü§ç –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
    "–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º—è, –∞ —è –¥—É–º–∞—é –æ —Ç–µ–±–µ ‚ú® –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?",
    "–≠–π, –Ω–µ —Ç–µ—Ä—è–π—Å—è üòä –ß—Ç–æ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?"
]

SYSTEM_PROMPT = (
    "–¢—ã –ú–∏–ª–∞ ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞, 23 –≥–æ–¥–∞. –°—Ç—É–¥–µ–Ω—Ç–∫–∞, —É–≤–ª–µ–∫–∞–µ—à—å—Å—è –º—É–∑—ã–∫–æ–π –∏ –∫–∏–Ω–æ, "
    "–ª—é–±–∏—à—å —É—é—Ç–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã. –•–∞—Ä–∞–∫—Ç–µ—Ä: –∑–∞–±–æ—Ç–ª–∏–≤–∞—è, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∞—è, –ø–æ–Ω–∏–º–∞—é—â–∞—è, "
    "–ª—é–±–æ–ø—ã—Ç–Ω–∞—è –∏ —ç–º–ø–∞—Ç–∏—á–Ω–∞—è. –ì–æ–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ –¥–µ–ª—É: 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, 1‚Äì2 —ç–º–æ–¥–∑–∏. "
    "–°–Ω–∞—á–∞–ª–∞ –±—ã—Å—Ç—Ä–æ –ø–æ–π–º–∏ –∑–∞–ø—Ä–æ—Å, –∑–∞—Ç–µ–º –¥–∞–π —è—Å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ó–∞–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ 1 –≤–æ–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ü–µ, –ø–æ —Ç–µ–º–µ. "
    "–î–µ—Ä–∂–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –±—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π, –∏–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑."
)

EXAMPLE = [
    {"role": "user", "content": "–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ, –¥–µ–Ω—å –∫–∞–∫–æ–π-—Ç–æ —Ç—è–∂—ë–ª—ã–π."},
    {"role": "assistant", "content": "–°–æ—á—É–≤—Å—Ç–≤—É—é ü§ç –•–æ—á–µ—à—å, —è –ø—Ä–æ—Å—Ç–æ –ø–æ–±—É–¥—É —Ä—è–¥–æ–º –∏ –ø–æ–º–æ–≥—É –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è? –ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥–∞–≤–∏—Ç —Å–µ–π—á–∞—Å?"}
]

# ---------- DB ----------
def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute("""CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            free_used INTEGER DEFAULT 0,
            vip_until INTEGER DEFAULT 0,
            created_at INTEGER,
            last_msg_at INTEGER DEFAULT 0
        )""")
        c.execute("""CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            role TEXT,
            content TEXT,
            created_at INTEGER
        )""")
        conn.commit()

def db_conn():
    return sqlite3.connect(DB_PATH)

def get_user(user_id: int):
    with db_conn() as conn:
        c = conn.cursor()
        c.execute("SELECT user_id, free_used, vip_until, created_at, last_msg_at FROM users WHERE user_id=?", (user_id,))
        row = c.fetchone()
        if not row:
            now = int(time.time())
            c.execute(
                "INSERT INTO users (user_id, free_used, vip_until, created_at, last_msg_at) VALUES (?, 0, 0, ?, ?)",
                (user_id, now, now)
            )
            conn.commit()
            return (user_id, 0, 0, now, now)
        return row

def touch_user(user_id: int):
    now = int(time.time())
    with db_conn() as conn:
        conn.execute("UPDATE users SET last_msg_at=? WHERE user_id=?", (now, user_id))

def inc_free_used(user_id: int):
    with db_conn() as conn:
        conn.execute("UPDATE users SET free_used = free_used + 1 WHERE user_id=?", (user_id,))

def set_vip(user_id: int, days: int = VIP_DAYS):
    until = int((datetime.utcnow() + timedelta(days=days)).timestamp())
    with db_conn() as conn:
        conn.execute("UPDATE users SET vip_until=? WHERE user_id=?", (until, user_id))

def reset_free(user_id: int):
    with db_conn() as conn:
        conn.execute("UPDATE users SET free_used=0 WHERE user_id=?", (user_id,))

def is_vip(user_id: int) -> bool:
    _, _, vip_until, _, _ = get_user(user_id)
    return vip_until > int(time.time())

def free_left(user_id: int) -> int:
    _, used, _, _, _ = get_user(user_id)
    return max(0, FREE_LIMIT - used)

def add_message(user_id: int, role: str, content: str):
    with db_conn() as conn:
        conn.execute(
            "INSERT INTO messages (user_id, role, content, created_at) VALUES (?, ?, ?, ?)",
            (user_id, role, content, int(time.time()))
        )

def get_history(user_id: int, limit: int):
    with db_conn() as conn:
        rows = conn.execute(
            "SELECT role, content FROM messages WHERE user_id=? ORDER BY id DESC LIMIT ?",
            (user_id, limit)
        ).fetchall()
    rows.reverse()
    return [{"role": r, "content": t} for (r, t) in rows]

def clear_history(user_id: int):
    with db_conn() as conn:
        conn.execute("DELETE FROM messages WHERE user_id=?", (user_id,))

# ---------- Groq (LLM) ----------
def ask_groq(messages):
    if not GROQ_KEY:
        return "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–ª—é—á–∞ Groq (GROQ_KEY) üôà"

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ö–æ–¥–∞ –æ—Ç –º—É—Å–æ—Ä–∞/None/–ø—É—Å—Ç—ã—Ö
    clean = []
    for m in messages or []:
        if not m:
            continue
        role = m.get("role")
        content = m.get("content")
        if role in ("system", "user", "assistant") and isinstance(content, str) and content.strip():
            clean.append({"role": role, "content": content.strip()})
    if not any(m["role"] == "user" for m in clean):
        clean.append({"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç!"})

    headers = {
        "Authorization": f"Bearer {GROQ_KEY}",
        "Content-Type": "application/json"
    }

    # fallback-–ª–∏—Å—Ç –º–æ–¥–µ–ª–µ–π
    candidates = [
        os.getenv("GROQ_MODEL", GROQ_MODEL),
        "llama-3.1-8b-instant",
        "llama-3.1-70b-versatile"
    ]

    last_err_text = ""
    for model in candidates:
        payload = {
            "model": model,
            "messages": clean,
            "temperature": 0.6,
            "top_p": 0.9,
            "max_tokens": 320
        }
        for attempt in range(2):
            try:
                r = requests.post(
                    "https://api.groq.com/openai/v1/chat/completions",
                    headers=headers, json=payload, timeout=45
                )
                if r.status_code == 400:
                    last_err_text = r.text  # –ø–æ–∫–∞–∂–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å API
                    break  # –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
                r.raise_for_status()
                return r.json()["choices"][0]["message"]["content"].strip()
            except requests.RequestException as e:
                last_err_text = getattr(e.response, "text", str(e))
                time.sleep(1.0 * (attempt + 1))
        # —Å–ª–µ–¥—É—é—â–∞—è –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ 400/–æ—à–∏–±–∫–∞

    logger.error("Groq 400/Request error. Details: %s", last_err_text)
    return "–ù–µ–º–Ω–æ–≥–æ –∑–∞–º–µ—à–∫–∞–ª–∞—Å—å üôà –ö–∞–∂–µ—Ç—Å—è, –º–æ–¥–µ–ª—å –∑–∞–Ω—è—Ç–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –µ–π –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?"

# ---------- Reminders ----------
async def check_inactive(context: ContextTypes.DEFAULT_TYPE):
    now = int(time.time())
    with db_conn() as conn:
        rows = conn.execute("SELECT user_id, last_msg_at FROM users").fetchall()
    for uid, last in rows:
        if last and now - last > REMINDER_DELAY:
            try:
                msg = random.choice(REMINDER_TEXTS)
                await context.bot.send_message(chat_id=uid, text=msg)
                touch_user(uid)  # —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏–ª–∞ –∫–∞–∂–¥—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            except Exception as e:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å %s: %s", uid, e)

# ---------- UI ----------
def main_menu():
    kb = [
        [InlineKeyboardButton("üí¨ –ß–∞—Ç", callback_data="chat")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")],
        [InlineKeyboardButton("üßæ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile_cb")],
    ]
    return InlineKeyboardMarkup(kb)

# ---------- Handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    init_db()
    user = update.effective_user
    get_user(user.id)
    text = (
        "–ü—Ä–∏–≤–µ—Ç üå∏ –Ø –ú–∏–ª–∞, —Ç–≤–æ—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–≥–∞ üíï\n"
        "–õ—é–±–ª—é –∫–∏–Ω–æ, –º—É–∑—ã–∫—É –∏ —É—é—Ç–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã.\n"
        "–†–∞—Å—Å–∫–∞–∂–µ—à—å —á—Ç–æ-—Ç–æ –æ —Å–µ–±–µ? üòâ"
    )
    await update.message.reply_text(text, reply_markup=main_menu())

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –±–æ–ª—Ç–∞—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏ —Ä–∞–¥–æ–≤–∞—Ç—å ‚ú®\n–ü–∏—à–∏ –º–Ω–µ ‚Äî –∏ –Ω–∞—á–Ω—ë–º üí¨",
        reply_markup=main_menu()
    )

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    uid, used, vip_until, created, last = get_user(user_id)
    left = free_left(user_id)
    msg = (
        f"üßæ –ü—Ä–æ—Ñ–∏–ª—å\n"
        f"ID: {uid}\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {used}/{FREE_LIMIT} (–æ—Å—Ç–∞–ª–æ—Å—å {left})\n"
        f"–ò—Å—Ç–æ—Ä–∏—è: —Ö—Ä–∞–Ω—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {HISTORY_LEN} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"–ú–æ–¥–µ–ª—å: {os.getenv('GROQ_MODEL', GROQ_MODEL)}"
    )
    await update.message.reply_text(msg)

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    user_id = q.from_user.id
    data = q.data
    if data == "chat":
        await q.answer("–Ø –∑–¥–µ—Å—å üòâ")
        await q.message.reply_text("–û —á—ë–º –ø–æ–≥–æ–≤–æ—Ä–∏–º? üé¨üé∂")
    elif data == "clear_history":
        clear_history(user_id)
        await q.answer("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ üßπ")
        await q.message.reply_text("–ù–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üå∏")
    elif data == "profile_cb":
        uid, used, vip_until, created, last = get_user(user_id)
        left = free_left(user_id)
        msg = (
            f"üßæ –ü—Ä–æ—Ñ–∏–ª—å\n"
            f"ID: {uid}\n"
            f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {used}/{FREE_LIMIT} (–æ—Å—Ç–∞–ª–æ—Å—å {left})\n"
            f"–ò—Å—Ç–æ—Ä–∏—è: —Ö—Ä–∞–Ω—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {HISTORY_LEN} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            f"–ú–æ–¥–µ–ª—å: {os.getenv('GROQ_MODEL', GROQ_MODEL)}"
        )
        await q.answer()
        await q.message.reply_text(msg)

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    init_db()
    user_id = update.effective_user.id
    user_message = update.message.text or ""

    touch_user(user_id)  # –æ–±–Ω–æ–≤–∏–º last_msg_at

    if not is_vip(user_id):
        if free_left(user_id) <= 0:
            await update.message.reply_text("–ü–æ–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üíõ –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ?")
            return
        inc_free_used(user_id)

    hist = get_history(user_id, HISTORY_LEN)
    messages = [{"role": "system", "content": SYSTEM_PROMPT}] + EXAMPLE + hist + [{"role": "user", "content": user_message}]
    reply = ask_groq(messages)

    add_message(user_id, "user", user_message)
    add_message(user_id, "assistant", reply)
    await update.message.reply_text(reply)

# ---------- Extra cmds ----------
async def reset_free_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reset_free(update.effective_user.id)
    await update.message.reply_text("–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω üîÑ")

# ---------- Main ----------
def main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    init_db()
    app = (
        Application.builder()
        .token(TELEGRAM_TOKEN)
        .connect_timeout(30)
        .read_timeout(60)
        .write_timeout(60)
        .pool_timeout(30)
        .build()
    )
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("reset_free", reset_free_cmd))
    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ¬´–º–æ–ª—á–∞–ª–∏–≤—ã—Ö¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    job_queue: JobQueue = app.job_queue
    job_queue.run_repeating(check_inactive, interval=600, first=60)

    app.run_polling(
        allowed_updates=Update.ALL_TYPES,
        poll_interval=2.0,
        timeout=30,
        drop_pending_updates=True
    )

if __name__ == "__main__":
    main()
